{"version":3,"sources":["../ts/browser-websocket.ts"],"names":["core_1","require","IPUtilities","__importStar","BrowserWebSocket","[object Object]","urlOrWebSocket","this","websocket","WebSocket","events","SocketEvents","addEventListener","getEvents","OPEN","notify","source","event","MESSAGE","data","CLOSE","code","reason","send","close","getPublicIP","exports"],"mappings":"gkBAMA,MAAAA,OAAAC,QAAA,wBACAC,YAAAC,aAAAF,QAAA,mBASA,MAAaG,iBAQZC,YAAmBC,GAEsBC,KAAKC,UAAf,iBAAnBF,EAA8C,IAAIG,UAAUH,GACjDA,EAEtBC,KAAKG,OAAS,IAAIV,OAAAW,aAElBJ,KAAKC,UAAUI,iBAAiB,OAAQ,KAEvCL,KAAKM,YAAYC,KAAKC,OAAO,CAC5BC,OAAQT,SAKVA,KAAKC,UAAUI,iBAAiB,UAAYK,IAE3CV,KAAKM,YAAYK,QAAQH,OAAO,CAC/BC,OAAQT,KACRY,KAAMF,EAAME,SAKdZ,KAAKC,UAAUI,iBAAiB,QAAUK,IAEzCV,KAAKM,YAAYO,MAAML,OAAO,CAC7BC,OAAQT,KACRc,KAAMJ,EAAMI,KACZC,OAAQL,EAAMK,WASVjB,KAAKc,GAEXZ,KAAKC,UAAUe,KAAKJ,GAIdd,MAAMgB,EAAeC,GAE3Bf,KAAKC,UAAUgB,MAAMH,EAAMC,GAIfjB,yDAEZ,aAAaH,YAAYuB,iBAInBpB,YAEN,OAAOE,KAAKG,QAlEdgB,QAAAtB,iBAAAA","file":"browser-websocket.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:42 PM -- November 21st, 2019.\n *\tProject: @commandsocket/browser-client\n */\n\nimport { ISocket, SocketEvents } from \"@command-socket/core\";\nimport * as IPUtilities from \"./ip-utilities\";\n\n/**\n * An implementation of the base CommandSocket ISocket for use in the browser.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class BrowserWebSocket implements ISocket {\n\t\n\tprivate readonly websocket: WebSocket;\n\t\n\tprivate readonly events: SocketEvents;\n\t\n\tpublic constructor(url: string);\n\tpublic constructor(websocket: WebSocket);\n\tpublic constructor(urlOrWebSocket: string | WebSocket) {\n\t\t\n\t\tif (typeof urlOrWebSocket === \"string\") this.websocket = new WebSocket(urlOrWebSocket);\n\t\telse this.websocket = urlOrWebSocket;\n\t\n\t\tthis.events = new SocketEvents();\n\t\t\n\t\tthis.websocket.addEventListener(\"open\", (): void => {\n\t\t\t\n\t\t\tthis.getEvents().OPEN.notify({\n\t\t\t\tsource: this\n\t\t\t});\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.websocket.addEventListener(\"message\", (event: MessageEvent): void => {\n\t\t\t\n\t\t\tthis.getEvents().MESSAGE.notify({\n\t\t\t\tsource: this,\n\t\t\t\tdata: event.data\n\t\t\t});\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.websocket.addEventListener(\"close\", (event: CloseEvent): void => {\n\t\t\n\t\t\tthis.getEvents().CLOSE.notify({\n\t\t\t\tsource: this,\n\t\t\t\tcode: event.code,\n\t\t\t\treason: event.reason\n\t\t\t});\n\t\t\n\t\t});\n\t\t\n\t\t// TODO [11/21/19 @ 12:50 PM] - Error event?\n\t\n\t}\n\t\n\tpublic send(data: any): void {\n\t\t\n\t\tthis.websocket.send(data);\n\t\t\n\t}\n\t\n\tpublic close(code?: number, reason?: string): void {\n\t\t\n\t\tthis.websocket.close(code, reason);\n\t\t\n\t}\n\t\n\tpublic async getIP(): Promise<string> {\n\t\t\n\t\treturn await IPUtilities.getPublicIP();\n\t\t\n\t}\n\t\n\tpublic getEvents(): SocketEvents {\n\t\t\n\t\treturn this.events;\n\t\t\n\t}\n\t\n}"]}