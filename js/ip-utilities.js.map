{"version":3,"sources":["../ts/ip-utilities.ts"],"names":["cachedIP","getPublicIP","undefined","sites","promises","site","push","Promise","resolve","reject","fetch","then","result","text","ip","catch","any","trim","require","exports"],"mappings":"qVAcA,IAAIA,SAEJ,SAAsBC,+DAErB,QAAiBC,IAAbF,SAAwB,CAE3B,IAAIG,EAAkB,CACrB,yBACA,yBAIGC,EAAmC,GAEvC,IAAK,IAAIC,KAAQF,EAEhBC,EAASE,KAAK,IAAIC,QACjB,CAACC,EAA2DC,KAE5DC,MAAML,GAAMM,KAAMC,IAEjBA,EAAOC,OAAOF,KAAMG,GAAeN,EAAQM,MAEzCC,MAAM,IAAMN,EAAO,iCAAmCJ,EAAO,UAMlEL,gBAAkBO,QAAQS,IAAYZ,IAAWa,OAIlD,OAAOjB,mEAzCRkB,QAAA,wBAUAC,QAAAlB,YAAAA","file":"ip-utilities.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t8:13 PM -- October 28th, 2019.\n *\tProject: @command-socket/core\n */\n\nimport \"promise-any-polyfill\";\n\n/**\n * The cached public IP of the device/network from which this module is operating.\n *\n * This is initially undefined, until the first time the {@link #getPublicIP} function is called, after which the cached\n * IP is used as the immediate return value of the `getPublicIP` function.\n */\nlet cachedIP: string | undefined;\n\nexport async function getPublicIP(): Promise<string> {\n\t\n\tif (cachedIP === undefined) {\n\t\t\n\t\tlet sites: string[] = [\n\t\t\t\"https://icanhazip.com/\",\n\t\t\t\"http://api.ipify.org/\",\n\t\t\t// \"http://ipv4bot.whatismyipaddress.com/\"\n\t\t];\n\t\t\n\t\tlet promises: Array<Promise<string>> = [];\n\t\t\n\t\tfor (let site of sites) {\n\t\t\t\n\t\t\tpromises.push(new Promise<string>(\n\t\t\t\t(resolve: (value?: (PromiseLike<string> | string)) => void, reject: (reason?: any) => void): void => {\n\t\t\t\t\n\t\t\t\tfetch(site).then((result: Response) => {\n\t\t\t\t\t\n\t\t\t\t\tresult.text().then((ip: string) => resolve(ip));\n\t\t\t\t\t\n\t\t\t\t}).catch(() => reject(\"Failed to get public IP from '\" + site + \"'.\"));\n\t\t\t\t\n\t\t\t}));\n\t\t\n\t\t}\n\t\t\n\t\tcachedIP = (await Promise.any<string>(promises)).trim();\n\t\t\n\t}\n\t\n\treturn cachedIP as string;\n\t\n}"]}