{"version":3,"sources":["../ts/command-socket-browser-client.ts"],"names":["core_1","require","browser_websocket_1","CommandSocketBrowserClient","CommandSocket","[object Object]","urlOrWebSocket","commandRegistry","CommandRegistry","metadata","super","BrowserWebSocket","Promise","resolve","commandsocket","getEvents","OPEN","subscribe","exports"],"mappings":"oEAMA,MAAAA,OAAAC,QAAA,wBAKAC,oBAAAD,QAAA,uBASA,MAAaE,mCAGeH,OAAAI,cAI3BC,YACCC,EACAC,EAAwC,IAAIP,OAAAQ,gBAC5CC,EAAuB,IAEvBC,MAAM,IAAIR,oBAAAS,iBAAiBL,GAAwBC,EAAiBE,GAU9DJ,cACNC,EACAC,EAAwC,IAAIP,OAAAQ,gBAC5CC,EAAuB,IAEvB,OAAO,IAAIG,QAAqCC,IAE/C,IAAIC,EAA4C,IAAIX,2BAA2BG,EAAuBC,GAEtGO,EAAcC,YAAYC,KAAKC,UAAU,IAAYJ,EAAQC,OA/BhEI,QAAAf,2BAAAA","file":"command-socket-browser-client.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:40 PM -- November 21st, 2019.\n *\tProject: @commandsocket/browser-client\n */\n\nimport {\n\tCommandSocket,\n\tCommandSetStructure,\n\tCommandRegistry\n} from \"@command-socket/core\";\nimport { BrowserWebSocket } from \"./browser-websocket\";\n\n/**\n * A browser-specific implementation of a CommandSocket.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketBrowserClient<\n\tLCS extends CommandSetStructure = any,\n\tRCS extends CommandSetStructure = any,\n\tM extends {} = {}> extends CommandSocket<LCS, RCS, M> {\n\t\n\tprotected constructor(url: string, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>);\n\tprotected constructor(websocket: WebSocket, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>);\n\tprotected constructor(\n\t\turlOrWebSocket: string | WebSocket,\n\t\tcommandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>(),\n\t\tmetadata: Partial<M> = {}) {\n\t\n\t\tsuper(new BrowserWebSocket(urlOrWebSocket as any), commandRegistry, metadata);\n\t\n\t}\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure, M extends {} = {}>(\n\t\turl: string, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>): Promise<CommandSocket<LCS, RCS, M>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure, M extends {} = {}>(\n\t\twebsocket: WebSocket, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>): Promise<CommandSocket<LCS, RCS, M>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure, M extends {} = {}>(\n\t\turlOrWebSocket: string | WebSocket,\n\t\tcommandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>(),\n\t\tmetadata: Partial<M> = {}): Promise<CommandSocket<LCS, RCS, M>> {\n\t\t\n\t\treturn new Promise<CommandSocket<LCS, RCS, M>>((resolve: (value?: (PromiseLike<CommandSocket<LCS, RCS, M>> | CommandSocket<LCS, RCS, M>)) => void): void => {\n\t\t\t\n\t\t\tlet commandsocket: CommandSocket<LCS, RCS, M> = new CommandSocketBrowserClient(urlOrWebSocket as any, commandRegistry);\n\t\t\t\n\t\t\tcommandsocket.getEvents().OPEN.subscribe((): void => resolve(commandsocket));\n\t\t\t\n\t\t});\n\t\t\n\t}\n\t\n}"]}