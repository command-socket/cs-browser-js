{"version":3,"sources":["../ts/command-socket-browser-client.ts"],"names":["core_1","require","browser_websocket_1","CommandSocketBrowserClient","CommandSocket","[object Object]","urlOrWebSocket","commandRegistry","CommandRegistry","super","BrowserWebSocket","Promise","resolve","commandsocket","getEvents","OPEN","subscribe","exports"],"mappings":"oEAMA,MAAAA,OAAAC,QAAA,wBAKAC,oBAAAD,QAAA,uBASA,MAAaE,mCAEmCH,OAAAI,cAI/CC,YAAsBC,EACfC,EAAwC,IAAIP,OAAAQ,iBAElDC,MAAM,IAAIP,oBAAAQ,iBAAiBJ,GAAwBC,GAU7CF,cAAgFC,EAC/DC,EAAwC,IAAIP,OAAAQ,iBAEnE,OAAO,IAAIG,QAAkCC,IAE5C,IAAIC,EAAyC,IAAIV,2BAA2BG,EAAuBC,GAEnGM,EAAcC,YAAYC,KAAKC,UAAU,IAAYJ,EAAQC,OA1BhEI,QAAAd,2BAAAA","file":"command-socket-browser-client.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t12:40 PM -- November 21st, 2019.\n *\tProject: @commandsocket/browser-client\n */\n\nimport {\n\tCommandSocket,\n\tCommandSetStructure,\n\tCommandRegistry\n} from \"@command-socket/core\";\nimport { BrowserWebSocket } from \"./browser-websocket\";\n\n/**\n * A browser-specific implementation of a CommandSocket.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketBrowserClient<\n\tLCS extends CommandSetStructure = any,\n\tRCS extends CommandSetStructure = any> extends CommandSocket<LCS, RCS> {\n\t\n\tprotected constructor(url: string, commandRegistry?: CommandRegistry<LCS>);\n\tprotected constructor(websocket: WebSocket, commandRegistry?: CommandRegistry<LCS>);\n\tprotected constructor(urlOrWebSocket: string | WebSocket,\n\t\t\t\t\t   commandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>()) {\n\t\n\t\tsuper(new BrowserWebSocket(urlOrWebSocket as any), commandRegistry);\n\t\n\t}\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(\n\t\turl: string, commandRegistry?: CommandRegistry<LCS>): Promise<CommandSocket<LCS, RCS>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(\n\t\twebsocket: WebSocket, commandRegistry?: CommandRegistry<LCS>): Promise<CommandSocket<LCS, RCS>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(urlOrWebSocket: string | WebSocket,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   commandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>()): Promise<CommandSocket<LCS, RCS>> {\n\t\t\n\t\treturn new Promise<CommandSocket<LCS, RCS>>((resolve: (value?: (PromiseLike<CommandSocket<LCS, RCS>> | CommandSocket<LCS, RCS>)) => void): void => {\n\t\t\t\n\t\t\tlet commandsocket: CommandSocket<LCS, RCS> = new CommandSocketBrowserClient(urlOrWebSocket as any, commandRegistry);\n\t\t\t\n\t\t\tcommandsocket.getEvents().OPEN.subscribe((): void => resolve(commandsocket));\n\t\t\t\n\t\t});\n\t\t\n\t}\n\t\n}"]}